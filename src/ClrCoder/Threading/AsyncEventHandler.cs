// <copyright file="AsyncEventHandler.cs" company="ClrCoder project">
// Copyright (c) ClrCoder project. All rights reserved.
// Licensed under the Apache 2.0 license. See LICENSE file in the project root for full license information.
// </copyright>

namespace ClrCoder.Threading
{
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Represents the method that will handle an event when the event provides data.
    /// You should use InvokeAsync extension method to gracefully execute this !multicast! delegate.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data. </param>
    /// <returns>Async execution TPL task.</returns>
    public delegate Task AsyncEventHandler<in TEventArgs>(object sender, TEventArgs e)
        where TEventArgs : EventArgs;

    /// <summary>
    /// Represents the method that will handle an event when the event provides data.
    /// You should use InvokeAsync extension method to gracefully execute this !multicast! delegate.
    /// </summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data. </param>
    /// <returns>Async execution TPL task.</returns>
    public delegate Task AsyncEventHandler(object sender, EventArgs e);
}